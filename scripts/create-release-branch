#!/bin/bash
# shellcheck disable=SC2155

set -e -u -o pipefail
# set -x

declare -r WD="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P)"
declare -r VERSION_FILE="$WD/.github/.version"

info() {
    printf "\\x1b[32m\\xE2\\x87\\x92 %s\\x1b[0m\\n" "$1"
}

error() {
    printf "\\x1b[97m\\x1b[41m\\x21\\x1b[0m \\x1b[31m%s\\x1b[0m\\n" "$1" 1>&2
    exit 1
}

get_version() {
    local version
    if [[ -f "$VERSION_FILE" ]]; then
        version=$(cat "$VERSION_FILE")
    fi
    echo "$version"
}

get_branch() {
    git branch | grep -E "^\\*" | awk '{print $2}'
}

get_access_token() {
    local file=$1
    cat "$file"
}

get_payload() {
    local branch=$1
    cat <<EOM
{
  "default_branch": "$branch"
}
EOM
}

update_version() {
    echo "$1" >"$VERSION_FILE"
}

get_next_branch_message() {
    local major=$1
    local minor=$2
    local patch=$3

    cat <<EOM
Which release branch do you want to create? [None]:
1) Major Version (\\x1b[33m$major\\x1b[0m)
2) Minor Version (\\x1b[33m$minor\\x1b[0m)
3) Patch Version (\\x1b[33m$patch\\x1b[0m)
4) Manual entry
>
EOM
}

split_version() {
    local numbers=("${1//./ }")
    echo "${numbers[@]}"
}

get_next_major_version() {
    local numbers=()
    IFS=" " read -r -a numbers <<<"$(split_version "$1")"
    [[ ${#numbers[@]} -eq 3 ]] && echo "$((numbers[0] + 1)).0.0"
}

get_next_minor_version() {
    local numbers=()
    IFS=" " read -r -a numbers <<<"$(split_version "$1")"
    [[ ${#numbers[@]} -eq 3 ]] && echo "${numbers[0]}.$((numbers[1] + 1)).0"
}

get_next_patch_version() {
    local numbers=()
    IFS=" " read -r -a numbers <<<"$(split_version "$1")"
    [[ ${#numbers[@]} -eq 3 ]] && echo "${numbers[0]}.${numbers[1]}.$((numbers[2] + 1))"
}

ask_for_version_number() {
    read -erp "Which version do you want to create: " number
    echo "$number"
}

create_next_release_branch() {
    local version=$1
    local owner="mickaelvieira"
    local repo="saxifrage"
    local endpoint="https://api.github.com/repos/$owner/$repo"
    local major=$(get_next_major_version "$version")
    local minor=$(get_next_minor_version "$version")
    local patch=$(get_next_patch_version "$version")
    local credentials="$WD/.github/.access_token"

    [[ -f "$credentials" ]] || error "Access Token file does not exist"

    read -erp "$(echo -e "$(get_next_branch_message "$major" "$minor" "$patch")") " next_branch

    local branch_prefix="release/"
    local version=
    case $next_branch in
    1) version="${major}" ;;
    2) version="${minor}" ;;
    3) version="${patch}" ;;
    4) version="$(ask_for_version_number)" ;;
    esac

    local branch_name="${branch_prefix}${version}"
    local token=$(get_access_token "$credentials")
    local payload=$(get_payload "$branch_name")

    if [[ -n "${branch_name}" ]]; then

        read -erp "$(echo -e "Do you want to create the branch with the name '\\x1b[33m${branch_name}\\x1b[0m'") [Y/n] " confirm

        [[ -z "$confirm" ]] && confirm="y"

        if [[ "$confirm" == y ]]; then
            git checkout -b "$branch_name"
            update_version "$version"
            git add "$VERSION_FILE"
            git commit -m "Update application's version"
            git push
            curl -v \
                -X PATCH \
                -H "Content-Type: application/json" \
                -H "Authorization: token $token" \
                --data "$payload" \
                "$endpoint"
        fi
    else
        info "Skipped!"
    fi
}

main() {
    local branch="$(get_branch)"
    [[ "$branch" != master ]] && git checkout master

    git pull origin master

    local version="$(get_version)"
    create_next_release_branch "$version"
}

main
