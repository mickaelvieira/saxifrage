package genrsa

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"

	"github.com/mickaelvieira/saxifrage/keys"
	"golang.org/x/crypto/ssh"
)

// New initialize a new RSA generator
func New(bitSize int) keys.Generator {
	return &Generator{
		keytype: keys.RSA,
		bitSize: bitSize,
	}
}

// Generator generates RSA private and public keys
type Generator struct {
	keytype keys.Type
	bitSize int
	pk      *rsa.PrivateKey
}

// GenPublicKey ...
func (g *Generator) GenPublicKey() ([]byte, error) {
	if g.pk == nil {
		return nil, keys.ErrPrivateKeyNotGenerated
	}

	key, err := ssh.NewPublicKey(g.pk.Public())
	if err != nil {
		return nil, err
	}

	return ssh.MarshalAuthorizedKey(key), nil
}

// GenPrivateKey ...
func (g *Generator) GenPrivateKey() ([]byte, error) {
	key, err := rsa.GenerateKey(rand.Reader, g.bitSize)
	if err != nil {
		return nil, err
	}

	err = key.Validate()
	if err != nil {
		return nil, err
	}

	g.pk = key

	return g.pkToPEM(key), nil
}

// GetKeyType returns the type of keys generated by this generator
func (g *Generator) GetKeyType() keys.Type {
	return g.keytype
}

func (g *Generator) pkToPEM(privateKey *rsa.PrivateKey) []byte {
	der := x509.MarshalPKCS1PrivateKey(privateKey)

	block := pem.Block{
		Type:    "RSA PRIVATE KEY",
		Headers: nil,
		Bytes:   der,
	}

	return pem.EncodeToMemory(&block)
}
